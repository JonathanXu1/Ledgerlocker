// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class listingBooked extends EthereumEvent {
  get params(): listingBooked__Params {
    return new listingBooked__Params(this);
  }
}

export class listingBooked__Params {
  _event: listingBooked;

  constructor(event: listingBooked) {
    this._event = event;
  }

  get _id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class listingClosed extends EthereumEvent {
  get params(): listingClosed__Params {
    return new listingClosed__Params(this);
  }
}

export class listingClosed__Params {
  _event: listingClosed;

  constructor(event: listingClosed) {
    this._event = event;
  }

  get _id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnershipTransferred extends EthereumEvent {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Contract__getListingResult {
  value0: BigInt;
  value1: BigInt;
  value2: Address;
  value3: Address;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: Address,
    value3: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    map.set("value2", EthereumValue.fromAddress(this.value2));
    map.set("value3", EthereumValue.fromAddress(this.value3));
    return map;
  }
}

export class Contract extends SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  balance(): BigInt {
    let result = super.call("balance", []);

    return result[0].toBigInt();
  }

  try_balance(): CallResult<BigInt> {
    let result = super.tryCall("balance", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  daiJoin(): Address {
    let result = super.call("daiJoin", []);

    return result[0].toAddress();
  }

  try_daiJoin(): CallResult<Address> {
    let result = super.tryCall("daiJoin", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  daiToken(): Address {
    let result = super.call("daiToken", []);

    return result[0].toAddress();
  }

  try_daiToken(): CallResult<Address> {
    let result = super.tryCall("daiToken", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getAccountBalance(_address: Address): BigInt {
    let result = super.call("getAccountBalance", [
      EthereumValue.fromAddress(_address)
    ]);

    return result[0].toBigInt();
  }

  try_getAccountBalance(_address: Address): CallResult<BigInt> {
    let result = super.tryCall("getAccountBalance", [
      EthereumValue.fromAddress(_address)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getAdminAccountBalance(): BigInt {
    let result = super.call("getAdminAccountBalance", []);

    return result[0].toBigInt();
  }

  try_getAdminAccountBalance(): CallResult<BigInt> {
    let result = super.tryCall("getAdminAccountBalance", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getFutureTimestamp(_duration: BigInt): BigInt {
    let result = super.call("getFutureTimestamp", [
      EthereumValue.fromUnsignedBigInt(_duration)
    ]);

    return result[0].toBigInt();
  }

  try_getFutureTimestamp(_duration: BigInt): CallResult<BigInt> {
    let result = super.tryCall("getFutureTimestamp", [
      EthereumValue.fromUnsignedBigInt(_duration)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getListing(_id: BigInt): Contract__getListingResult {
    let result = super.call("getListing", [
      EthereumValue.fromUnsignedBigInt(_id)
    ]);

    return new Contract__getListingResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toAddress(),
      result[3].toAddress()
    );
  }

  try_getListing(_id: BigInt): CallResult<Contract__getListingResult> {
    let result = super.tryCall("getListing", [
      EthereumValue.fromUnsignedBigInt(_id)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new Contract__getListingResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toAddress(),
        value[3].toAddress()
      )
    );
  }

  getTotalUserBalance(): BigInt {
    let result = super.call("getTotalUserBalance", []);

    return result[0].toBigInt();
  }

  try_getTotalUserBalance(): CallResult<BigInt> {
    let result = super.tryCall("getTotalUserBalance", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getWithdrawableBalance(_address: Address): BigInt {
    let result = super.call("getWithdrawableBalance", [
      EthereumValue.fromAddress(_address)
    ]);

    return result[0].toBigInt();
  }

  try_getWithdrawableBalance(_address: Address): CallResult<BigInt> {
    let result = super.tryCall("getWithdrawableBalance", [
      EthereumValue.fromAddress(_address)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", []);

    return result[0].toBoolean();
  }

  try_isOwner(): CallResult<boolean> {
    let result = super.tryCall("isOwner", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", []);

    return result[0].toAddress();
  }

  try_owner(): CallResult<Address> {
    let result = super.tryCall("owner", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  pot(): Address {
    let result = super.call("pot", []);

    return result[0].toAddress();
  }

  try_pot(): CallResult<Address> {
    let result = super.tryCall("pot", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  vat(): Address {
    let result = super.call("vat", []);

    return result[0].toAddress();
  }

  try_vat(): CallResult<Address> {
    let result = super.tryCall("vat", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }
}

export class BookListingCall extends EthereumCall {
  get inputs(): BookListingCall__Inputs {
    return new BookListingCall__Inputs(this);
  }

  get outputs(): BookListingCall__Outputs {
    return new BookListingCall__Outputs(this);
  }
}

export class BookListingCall__Inputs {
  _call: BookListingCall;

  constructor(call: BookListingCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _duration(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BookListingCall__Outputs {
  _call: BookListingCall;

  constructor(call: BookListingCall) {
    this._call = call;
  }
}

export class CreateListingCall extends EthereumCall {
  get inputs(): CreateListingCall__Inputs {
    return new CreateListingCall__Inputs(this);
  }

  get outputs(): CreateListingCall__Outputs {
    return new CreateListingCall__Outputs(this);
  }
}

export class CreateListingCall__Inputs {
  _call: CreateListingCall;

  constructor(call: CreateListingCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _price(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CreateListingCall__Outputs {
  _call: CreateListingCall;

  constructor(call: CreateListingCall) {
    this._call = call;
  }
}

export class CreateVoteCall extends EthereumCall {
  get inputs(): CreateVoteCall__Inputs {
    return new CreateVoteCall__Inputs(this);
  }

  get outputs(): CreateVoteCall__Outputs {
    return new CreateVoteCall__Outputs(this);
  }
}

export class CreateVoteCall__Inputs {
  _call: CreateVoteCall;

  constructor(call: CreateVoteCall) {
    this._call = call;
  }
}

export class CreateVoteCall__Outputs {
  _call: CreateVoteCall;

  constructor(call: CreateVoteCall) {
    this._call = call;
  }
}

export class EndListingCall extends EthereumCall {
  get inputs(): EndListingCall__Inputs {
    return new EndListingCall__Inputs(this);
  }

  get outputs(): EndListingCall__Outputs {
    return new EndListingCall__Outputs(this);
  }
}

export class EndListingCall__Inputs {
  _call: EndListingCall;

  constructor(call: EndListingCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class EndListingCall__Outputs {
  _call: EndListingCall;

  constructor(call: EndListingCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends EthereumCall {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetSecondsPerBlockCall extends EthereumCall {
  get inputs(): SetSecondsPerBlockCall__Inputs {
    return new SetSecondsPerBlockCall__Inputs(this);
  }

  get outputs(): SetSecondsPerBlockCall__Outputs {
    return new SetSecondsPerBlockCall__Outputs(this);
  }
}

export class SetSecondsPerBlockCall__Inputs {
  _call: SetSecondsPerBlockCall;

  constructor(call: SetSecondsPerBlockCall) {
    this._call = call;
  }

  get _seconds(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetSecondsPerBlockCall__Outputs {
  _call: SetSecondsPerBlockCall;

  constructor(call: SetSecondsPerBlockCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends EthereumCall {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
